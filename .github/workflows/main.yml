name: Node.js CI/CD with Docker

on:
  pull_request:
    branches: 
      - "main"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
      VPS_HOST: ${{ secrets.VPS_HOST }}
      VPS_USER: ${{ secrets.VPS_USER }}
      VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
      DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
      IMAGE_NAME: titomeet-front
      ENV_FILE: ${{ vars.ENV_FILE }}
      CONTAINER_NAME: titomeet-front
      APP_PORT: ${{ vars.APP_PORT }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKERHUB_USERNAME }}
        password: ${{ env.DOCKERHUB_PASSWORD }}

    - name: Determine Image Tag Based on Branch
      run: |
        if [[ "${{ github.ref_name }}" == "main" ]]; then
          echo "IMAGE_TAG=latest" >> $GITHUB_ENV
          echo "CONTAINER_NAME=titomeet-front" >> $GITHUB_ENV
          echo "APP_PORT=5000" >> $GITHUB_ENV
        elif [[ "${{ github.ref_name }}" == "dev" ]]; then
          echo "IMAGE_TAG=dev" >> $GITHUB_ENV
          echo "CONTAINER_NAME=titomeet-front-dev" >> $GITHUB_ENV
          echo "APP_PORT=5001" >> $GITHUB_ENV
        fi

    - name: Debug Variables
      run: |
        echo "DOCKERHUB_USERNAME=${{ env.DOCKERHUB_USERNAME }}"
        echo "IMAGE_NAME=${{ env.IMAGE_NAME }}"
        echo "CONTAINER_NAME=${{ env.CONTAINER_NAME }}"
        echo "APP_PORT=${{ env.APP_PORT }}"

    - name: Build and Push Docker Image
      run: |
        docker build -t $DOCKERHUB_USERNAME/$IMAGE_NAME:$IMAGE_TAG .
        docker push $DOCKERHUB_USERNAME/$IMAGE_NAME:$IMAGE_TAG

    - name: Deploy to VPS
      uses: appleboy/ssh-action@v0.1.1
      with:
        host: ${{ env.VPS_HOST }}
        username: ${{ env.VPS_USER }}
        password: ${{ env.VPS_PASSWORD }}
        script: |

          # Pull latest image from Docker Hub
          docker pull ${{ env.DOCKERHUB_USERNAME }}/${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}
          
          # Stop and remove old container if exists
          docker stop ${{ env.CONTAINER_NAME }} || true
          docker rm ${{ env.CONTAINER_NAME }} || true

          # Navigate to the deploy path
          cd ${{ env.DEPLOY_PATH }}

          # Run the new container with environment variables
          docker run -d --name ${{env.CONTAINER_NAME}} --env-file .env -p ${{env.APP_PORT}}:3000 ${{env.DOCKERHUB_USERNAME}}/${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}
          # Clean up old Docker images
          docker image prune -f
